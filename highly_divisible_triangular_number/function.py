# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?


def initiate_list_of_primes(max_number):
	list_of_prime_numbers = [2]
	for number in range(2, max_number):
		list_of_prime_numbers = get_list_of_prime_numbers(list_of_prime_numbers, number)
	return list_of_prime_numbers


def get_triangle_number(max_divisors, list_of_prime_numbers):
	divisors = []
	number = 2
	triangle_number = 3

	while len(divisors) < max_divisors:
		number = number + 1
		triangle_number = triangle_number + number

		#list_of_prime_numbers = get_list_of_prime_numbers(list_of_prime_numbers, triangle_number)
		#print(list_of_prime_numbers)
		divisors = get_divisors_recursive(triangle_number, list_of_prime_numbers)
		print(f"triangle_number={triangle_number}, len(divisors)={len(divisors)}")
	return triangle_number


def get_result():
	max_divisors = 100
	max_number = 1000000
	list_of_prime_numbers = initiate_list_of_primes(max_number)
	result = get_triangle_number(max_divisors, list_of_prime_numbers)
	print(result)

def get_divisors_recursive(number, list_of_prime_numbers):

	result = [1, number]
	
	for prime_number in list_of_prime_numbers:
		temp_number = number

		if temp_number % prime_number == 0:
			temp_number = int(temp_number / prime_number)
			temp_result = get_divisors_recursive(temp_number, list_of_prime_numbers)
			result = result + temp_result

	result = list(set(result))
	result.sort()
	return result

def get_divisors(number, list_of_prime_numbers):

	result = [1]

	for prime_number in list_of_prime_numbers:
		temp_number = number
		print(f"prime_number={prime_number}, number={number}")
		while temp_number >= prime_number:
			if temp_number not in result:
				result.append(temp_number)
			print(result)
			if temp_number % prime_number == 0:
				temp_number = int(temp_number / prime_number)
				if temp_number not in result:
					result.append(temp_number)
				if prime_number not in result:
					result.append(prime_number)
			else:
				print(f"BREAK prime_number={prime_number}, temp_number={temp_number}")
				break

	result.sort()
	return result


def get_list_of_prime_numbers(list_of_prime_numbers, new_number):
	is_prime_number = True
	for prime_number in list_of_prime_numbers:
		if new_number % prime_number == 0:
			is_prime_number = False

	if is_prime_number:
		list_of_prime_numbers.append(new_number)

	return list_of_prime_numbers
		
		
